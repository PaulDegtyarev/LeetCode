LeetCode

-----------------------------------------------
medium
180. Consecutive Numbers

SELECT DISTINCT l1.num AS ConsecutiveNums
FROM Logs AS l1, Logs AS l2, Logs AS l3
WHERE l2.id = l1.id+1 AND l3.id = l2.id+1 AND l1.num = l2.num AND l2.num = l3.num;
-----------------------------------------------

-----------------------------------------------
medium
184. Department Highest Salary

SELECT d.Name AS Department, e1.Name AS Employee, e1.Salary
FROM employee AS e1 LEFT JOIN employee AS e2
ON e1.departmentId = e2.departmentId AND e1.salary < e2.salary
JOIN Department AS d ON e1.departmentId = d.Id
WHERE e2.Salary IS NULL;
-----------------------------------------------

-----------------------------------------------
medium
570. Managers with at Least 5 Direct Reports

SELECT name 
FROM Employee 
WHERE id IN (SELECT managerId FROM Employee GROUP BY managerId HAVING COUNT(id) >= 5);
-----------------------------------------------

-----------------------------------------------
medium
1934. Confirmation Rate

SELECT s.user_id, ifnull(round(sum(action = 'confirmed') / count(*), 2), 0.00) AS confirmation_rate
FROM Signups s LEFT JOIN Confirmations c 
USING(user_id)
group by s.user_id;
-----------------------------------------------

-----------------------------------------------
medium
1193. Monthly Transactions I

SELECT DATE_FORMAT(trans_date, '%Y-%m') AS month, country, COUNT(state) AS trans_count, SUM(IF(state = 'approved', 1,0)) AS approved_count , SUM(amount) AS trans_total_amount, SUM(if(state = 'approved', amount, 0)) AS approved_total_amount 
FROM Transactions
GROUP BY DATE_FORMAT(trans_date, '%Y-%m'), country; 
-----------------------------------------------

-----------------------------------------------
medium
1174. Immediate Food Delivery II

SELECT ROUND(SUM(IF(order_date = customer_pref_delivery_date, 1, 0)) / COUNT(*) * 100, 2) AS immediate_percentage 
FROM Delivery
WHERE(customer_id, order_date) IN (SELECT customer_id, MIN(order_date) FROM Delivery GROUP BY customer_id);
-----------------------------------------------

-----------------------------------------------
medium
550. Game Play Analysis IV

SELECT ROUND(COUNT(*) / (SELECT COUNT(DISTINCT player_id) FROM Activity),2) AS fraction 
FROM Activity
WHERE (player_id, DATE_SUB(event_date, INTERVAL 1 DAY)) IN (SELECT player_id, MIN(event_date) as first_login FROM Activity GROUP BY player_id);
-----------------------------------------------

-----------------------------------------------
medium
1070. Product Sales Analysis III

SELECT product_id, year AS first_year, quantity, price
FROM Sales
WHERE (product_id, year) IN (SELECT product_id, MIN(year) FROM Sales GROUP BY product_id);
-----------------------------------------------

-----------------------------------------------
medium
1045. Customers Who Bought All Products

SELECT customer_id
FROM Customer
GROUP BY customer_id
HAVING COUNT(distinct product_key) = (SELECT COUNT(DISTINCT product_key) FROM Product);
-----------------------------------------------

-----------------------------------------------
medium
1164. Product Price at a Given Date

SELECT DISTINCT product_id, 10 as price 
FROM Products 
WHERE product_id NOT IN(SELECT DISTINCT product_id FROM Products WHERE change_date <='2019-08-16')
UNION 
SELECT product_id, new_price AS price
FROM Products
WHERE (product_id,change_date) IN (SELECT product_id , MAX(change_date) AS date FROM Products WHERE change_date <='2019-08-16' GROUP BY product_id);
-----------------------------------------------

-----------------------------------------------
medium
1204. Last Person to Fit in the Bus

SELECT person_name
FROM Queue AS last_person
WHERE (SELECT SUM(weight) FROM Queue WHERE turn <= last_person.turn) <= 1000
ORDER BY turn DESC
LIMIT 1;
-----------------------------------------------

-----------------------------------------------
medium
1907. Count Salary Categories

SELECT 'Low Salary' AS category, COUNT(account_id) AS accounts_count 
FROM Accounts
WHERE income < 20000
UNION
SELECT 'Average Salary' AS category, COUNT(account_id) AS accounts_count 
FROM Accounts
WHERE income BETWEEN 20000 AND 50000
UNION
SELECT 'High Salary' AS category, COUNT(account_id) AS accounts_count 
FROM Accounts
WHERE income > 50000;
-----------------------------------------------

-----------------------------------------------
medium
626. Exchange Seats

SELECT(CASE
WHEN id % 2 = 0 THEN id - 1
WHEN id = (SELECT MAX(id) FROM Seat) THEN id
ELSE id + 1 END) AS id, student
FROM Seat
ORDER BY id ASC;
-----------------------------------------------

-----------------------------------------------
medium
1341. Movie Rating

(SELECT name AS results
FROM movierating JOIN users USING(user_id)
GROUP BY user_id
ORDER BY count(movie_id) DESC, name
LIMIT 1) 

UNION ALL

(SELECT title AS results
FROM movierating JOIN movies USING(movie_id)
WHERE created_at >= '2020-02-01' AND created_at < '2020-03-01'
GROUP BY title
ORDER BY AVG(rating) DESC, title
LIMIT 1) 
-----------------------------------------------

-----------------------------------------------
Easy
1084. Sales Analysis III

SELECT Product.product_id, Product.product_name FROM Product 
JOIN Sales 
ON Product.product_id = Sales.product_id 
GROUP BY Sales.product_id 
HAVING MIN(Sales.sale_date) >= "2019-01-01" AND MAX(Sales.sale_date) <= "2019-03-31";
-----------------------------------------------

-----------------------------------------------
medium
1321. Restaurant Growth

SELECT c1.visited_on AS visited_on, SUM(c2.amount) AS amount,
       ROUND(AVG(c2.amount), 2) AS average_amount
FROM(SELECT visited_on, SUM(amount) AS amount FROM Customer GROUP BY visited_on) c1 JOIN(SELECT visited_on, SUM(amount) AS amount FROM Customer GROUP BY visited_on) c2
WHERE DATEDIFF(c1.visited_on, c2.visited_on) BETWEEN 0 AND 6
GROUP BY c1.visited_on
HAVING COUNT(c2.visited_on) = 7;
-----------------------------------------------

-----------------------------------------------
medium
602. Friend Requests II: Who Has the Most Friends

SELECT id , count(id) AS num
FROM (SELECT requester_id id FROM requestaccepted 
UNION ALL
SELECT accepter_id FROM requestaccepted
)s
GROUP BY id
ORDER BY count(id) DESC LIMIT 1;
-----------------------------------------------

-----------------------------------------------
medium
585. Investments in 2016

SELECT ROUND(SUM(tiv_2016), 2) AS tiv_2016 
FROM Insurance 
WHERE (lat, lon) IN (SELECT lat, lon  FROM Insurance GROUP BY lat, lon HAVING COUNT(*) = 1) AND tiv_2015 IN (SELECT tiv_2015 FROM Insurance GROUP BY tiv_2015 HAVING COUNT(tiv_2015) > 1);
-----------------------------------------------

-----------------------------------------------
hard
185. Department Top Three Salaries

SELECT d.name AS department , e.name AS employee, e.salary AS Salary
FROM employee e, Department d 
WHERE e.departmentID = d.id AND (SELECT COUNT(DISTINCT (e2.Salary)) FROM  Employee e2 WHERE e2.Salary > e.Salary AND e.DepartmentId = e2.DepartmentId) < 3;
-----------------------------------------------

-----------------------------------------------
Easy
1280. Students and Examinations

SELECT s.student_id, s.student_name, sb.subject_name, (SELECT COUNT(student_id) FROM Examinations WHERE student_id = s.student_id AND subject_name = sb.subject_name) AS attended_exams 
FROM Students s JOIN Subjects sb
ORDER BY s.student_id ASC, sb.subject_name ASC;
-----------------------------------------------

-----------------------------------------------
easy
11. String concatenation

SELECT contest_id, ROUND(COUNT(contest_id)/(SELECT COUNT(user_id) FROM Users)*100, 2) AS percentage 
FROM Register
GROUP BY contest_id
ORDER BY percentage DESC, contest_id;
-----------------------------------------------

-----------------------------------------------
Hard
262. Trips and Users

SELECT Request_at AS Day,
    ROUND(SUM(IF(Status = 'completed', 0, 1))/COUNT(Status), 2) AS 'Cancellation Rate' 

FROM Trips 

WHERE Client_Id NOT IN (SELECT Users_Id FROM Users WHERE Banned = 'Yes') 
    AND Driver_Id NOT IN (SELECT Users_Id FROM Users WHERE Banned = 'Yes')
    AND Request_at BETWEEN '2013-10-01' AND '2013-10-03'

GROUP BY Request_at;
-----------------------------------------------





















